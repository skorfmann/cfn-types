/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Create an Elastic Container Service (ECS) cluster.
 */
export interface AwsEcsCluster {
  Tags?: Tag[];
  /**
   * A user-generated string that you use to identify your cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.
   */
  ClusterName?: string;
  ClusterSettings?: ClusterSettings[];
  Configuration?: ClusterConfiguration;
  CapacityProviders?: string[];
  DefaultCapacityProviderStrategy?: CapacityProviderStrategyItem[];
  ServiceConnectDefaults?: ServiceConnectDefaults;
  /**
   * The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster.
   */
  Arn?: string;
}
/**
 * The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
 */
export interface Tag {
  Key?: string;
  Value?: string;
}
/**
 * The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
 */
export interface ClusterSettings {
  Name?: string;
  Value?: string;
}
/**
 * The configurations to be set at cluster level.
 */
export interface ClusterConfiguration {
  ExecuteCommandConfiguration?: ExecuteCommandConfiguration;
}
/**
 * The configuration for ExecuteCommand.
 */
export interface ExecuteCommandConfiguration {
  KmsKeyId?: string;
  Logging?: string;
  LogConfiguration?: ExecuteCommandLogConfiguration;
}
/**
 * The session logging configuration for ExecuteCommand.
 */
export interface ExecuteCommandLogConfiguration {
  CloudWatchLogGroupName?: string;
  CloudWatchEncryptionEnabled?: boolean;
  S3BucketName?: string;
  S3EncryptionEnabled?: boolean;
  S3KeyPrefix?: string;
}
/**
 * A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.
 */
export interface CapacityProviderStrategyItem {
  CapacityProvider?: string;
  Weight?: number;
  Base?: number;
}
/**
 * Service Connect Configuration default for all services or tasks within this cluster
 */
export interface ServiceConnectDefaults {
  /**
   * Service Connect Namespace Name or ARN default for all services or tasks within this cluster
   */
  Namespace?: string;
}
