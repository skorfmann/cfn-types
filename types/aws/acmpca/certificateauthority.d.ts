/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * String that contains X.509 ObjectIdentifier information.
 */
export type CustomObjectIdentifier = string;
/**
 * Array of X.500 attribute type and value. CustomAttributes cannot be used along with pre-defined attributes.
 */
export type CustomAttributeList = CustomAttribute[];
/**
 * Pre-defined enum string for X.509 AccessMethod ObjectIdentifiers.
 */
export type AccessMethodType = string;
/**
 * String that contains X.509 Rfc822Name information.
 */
export type Rfc822Name = string;
/**
 * String that contains X.509 DnsName information.
 */
export type DnsName = string;
/**
 * String that contains X.509 UniformResourceIdentifier information.
 */
export type UniformResourceIdentifier = string;
/**
 * String that contains X.509 IpAddress information.
 */
export type IpAddress = string;
/**
 * Array of X.509 AccessDescription.
 */
export type SubjectInformationAccess = AccessDescription[];

/**
 * Private certificate authority.
 */
export interface AwsAcmpcaCertificateauthority {
  /**
   * The Amazon Resource Name (ARN) of the certificate authority.
   */
  Arn?: string;
  /**
   * The type of the certificate authority.
   */
  Type: string;
  /**
   * Public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate.
   */
  KeyAlgorithm: string;
  /**
   * Algorithm your CA uses to sign certificate requests.
   */
  SigningAlgorithm: string;
  Subject: Subject;
  RevocationConfiguration?: RevocationConfiguration;
  Tags?: Tag[];
  /**
   * The base64 PEM-encoded certificate signing request (CSR) for your certificate authority certificate.
   */
  CertificateSigningRequest?: string;
  CsrExtensions?: CsrExtensions;
  /**
   * KeyStorageSecurityStadard defines a cryptographic key management compliance standard used for handling CA keys.
   */
  KeyStorageSecurityStandard?: string;
  /**
   * Usage mode of the ceritificate authority.
   */
  UsageMode?: string;
}
/**
 * Structure that contains X.500 distinguished name information for your CA.
 */
export interface Subject {
  Country?: string;
  Organization?: string;
  OrganizationalUnit?: string;
  DistinguishedNameQualifier?: string;
  State?: string;
  CommonName?: string;
  SerialNumber?: string;
  Locality?: string;
  Title?: string;
  Surname?: string;
  GivenName?: string;
  Initials?: string;
  Pseudonym?: string;
  GenerationQualifier?: string;
  CustomAttributes?: CustomAttributeList;
}
/**
 * Structure that contains X.500 attribute type and value.
 */
export interface CustomAttribute {
  ObjectIdentifier: CustomObjectIdentifier;
  Value: string;
}
/**
 * Certificate revocation information used by the CreateCertificateAuthority and UpdateCertificateAuthority actions.
 */
export interface RevocationConfiguration {
  CrlConfiguration?: CrlConfiguration;
  OcspConfiguration?: OcspConfiguration;
}
/**
 * Your certificate authority can create and maintain a certificate revocation list (CRL). A CRL contains information about certificates that have been revoked.
 */
export interface CrlConfiguration {
  Enabled?: boolean;
  ExpirationInDays?: number;
  CustomCname?: string;
  S3BucketName?: string;
  S3ObjectAcl?: string;
}
/**
 * Helps to configure online certificate status protocol (OCSP) responder for your certificate authority
 */
export interface OcspConfiguration {
  Enabled?: boolean;
  OcspCustomCname?: string;
}
export interface Tag {
  Key?: string;
  Value?: string;
}
/**
 * Structure that contains CSR pass through extension information used by the CreateCertificateAuthority action.
 */
export interface CsrExtensions {
  KeyUsage?: KeyUsage;
  SubjectInformationAccess?: SubjectInformationAccess;
}
/**
 * Structure that contains X.509 KeyUsage information.
 */
export interface KeyUsage {
  DigitalSignature?: boolean;
  NonRepudiation?: boolean;
  KeyEncipherment?: boolean;
  DataEncipherment?: boolean;
  KeyAgreement?: boolean;
  KeyCertSign?: boolean;
  CRLSign?: boolean;
  EncipherOnly?: boolean;
  DecipherOnly?: boolean;
}
/**
 * Structure that contains X.509 AccessDescription information.
 */
export interface AccessDescription {
  AccessMethod: AccessMethod;
  AccessLocation: GeneralName;
}
/**
 * Structure that contains X.509 AccessMethod information. Assign one and ONLY one field.
 */
export interface AccessMethod {
  CustomObjectIdentifier?: CustomObjectIdentifier;
  AccessMethodType?: AccessMethodType;
}
/**
 * Structure that contains X.509 GeneralName information. Assign one and ONLY one field.
 */
export interface GeneralName {
  OtherName?: OtherName;
  Rfc822Name?: Rfc822Name;
  DnsName?: DnsName;
  DirectoryName?: Subject1;
  EdiPartyName?: EdiPartyName;
  UniformResourceIdentifier?: UniformResourceIdentifier;
  IpAddress?: IpAddress;
  RegisteredId?: CustomObjectIdentifier;
}
/**
 * Structure that contains X.509 OtherName information.
 */
export interface OtherName {
  TypeId: CustomObjectIdentifier;
  Value: string;
}
/**
 * Structure that contains X.500 distinguished name information for your CA.
 */
export interface Subject1 {
  Country?: string;
  Organization?: string;
  OrganizationalUnit?: string;
  DistinguishedNameQualifier?: string;
  State?: string;
  CommonName?: string;
  SerialNumber?: string;
  Locality?: string;
  Title?: string;
  Surname?: string;
  GivenName?: string;
  Initials?: string;
  Pseudonym?: string;
  GenerationQualifier?: string;
  CustomAttributes?: CustomAttributeList;
}
/**
 * Structure that contains X.509 EdiPartyName information.
 */
export interface EdiPartyName {
  PartyName: string;
  NameAssigner: string;
}
