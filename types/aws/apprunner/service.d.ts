/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The AWS::AppRunner::Service resource specifies an AppRunner Service.
 */
export interface AwsApprunnerService {
  /**
   * The AppRunner Service Name.
   */
  ServiceName?: string;
  /**
   * The AppRunner Service Id
   */
  ServiceId?: string;
  /**
   * The Amazon Resource Name (ARN) of the AppRunner Service.
   */
  ServiceArn?: string;
  /**
   * The Service Url of the AppRunner Service.
   */
  ServiceUrl?: string;
  /**
   * AppRunner Service status.
   */
  Status?: string;
  SourceConfiguration: SourceConfiguration;
  InstanceConfiguration?: InstanceConfiguration;
  Tags?: Tag[];
  EncryptionConfiguration?: EncryptionConfiguration;
  HealthCheckConfiguration?: HealthCheckConfiguration;
  ObservabilityConfiguration?: ServiceObservabilityConfiguration;
  /**
   * Autoscaling configuration ARN
   */
  AutoScalingConfigurationArn?: string;
  NetworkConfiguration?: NetworkConfiguration;
}
/**
 * Source Code configuration
 */
export interface SourceConfiguration {
  CodeRepository?: CodeRepository;
  ImageRepository?: ImageRepository;
  /**
   * Auto Deployment enabled
   */
  AutoDeploymentsEnabled?: boolean;
  AuthenticationConfiguration?: AuthenticationConfiguration;
}
/**
 * Source Code Repository
 */
export interface CodeRepository {
  /**
   * Repository Url
   */
  RepositoryUrl: string;
  SourceCodeVersion: SourceCodeVersion;
  CodeConfiguration?: CodeConfiguration;
}
/**
 * Source Code Version
 */
export interface SourceCodeVersion {
  /**
   * Source Code Version Type
   */
  Type: "BRANCH";
  /**
   * Source Code Version Value
   */
  Value: string;
}
/**
 * Code Configuration
 */
export interface CodeConfiguration {
  /**
   * Configuration Source
   */
  ConfigurationSource: "REPOSITORY" | "API";
  CodeConfigurationValues?: CodeConfigurationValues;
}
/**
 * Code Configuration Values
 */
export interface CodeConfigurationValues {
  /**
   * Runtime
   */
  Runtime:
    | "PYTHON_3"
    | "NODEJS_12"
    | "NODEJS_14"
    | "CORRETTO_8"
    | "CORRETTO_11"
    | "NODEJS_16"
    | "GO_1"
    | "DOTNET_6"
    | "PHP_81"
    | "RUBY_31";
  /**
   * Build Command
   */
  BuildCommand?: string;
  /**
   * Start Command
   */
  StartCommand?: string;
  /**
   * Port
   */
  Port?: string;
  RuntimeEnvironmentVariables?: KeyValuePair[];
  /**
   * The secrets and parameters that get referenced by your service as environment variables
   */
  RuntimeEnvironmentSecrets?: KeyValuePair[];
}
export interface KeyValuePair {
  Name?: string;
  Value?: string;
}
/**
 * Image Repository
 */
export interface ImageRepository {
  /**
   * Image Identifier
   */
  ImageIdentifier: string;
  ImageConfiguration?: ImageConfiguration;
  /**
   * Image Repository Type
   */
  ImageRepositoryType: "ECR" | "ECR_PUBLIC";
}
/**
 * Image Configuration
 */
export interface ImageConfiguration {
  /**
   * Start Command
   */
  StartCommand?: string;
  /**
   * Port
   */
  Port?: string;
  RuntimeEnvironmentVariables?: KeyValuePair[];
  /**
   * The secrets and parameters that get referenced by your service as environment variables
   */
  RuntimeEnvironmentSecrets?: KeyValuePair[];
}
/**
 * Authentication Configuration
 */
export interface AuthenticationConfiguration {
  /**
   * Connection Arn
   */
  ConnectionArn?: string;
  /**
   * Access Role Arn
   */
  AccessRoleArn?: string;
}
/**
 * Instance Configuration
 */
export interface InstanceConfiguration {
  /**
   * CPU
   */
  Cpu?: string;
  /**
   * Memory
   */
  Memory?: string;
  /**
   * Instance Role Arn
   */
  InstanceRoleArn?: string;
}
export interface Tag {
  Key?: string;
  Value?: string;
}
/**
 * Encryption configuration (KMS key)
 */
export interface EncryptionConfiguration {
  /**
   * The KMS Key
   */
  KmsKey: string;
}
/**
 * Health check configuration
 */
export interface HealthCheckConfiguration {
  /**
   * Health Check Protocol
   */
  Protocol?: "TCP" | "HTTP";
  /**
   * Health check Path
   */
  Path?: string;
  /**
   * Health check Interval
   */
  Interval?: number;
  /**
   * Health check Timeout
   */
  Timeout?: number;
  /**
   * Health check Healthy Threshold
   */
  HealthyThreshold?: number;
  /**
   * Health check Unhealthy Threshold
   */
  UnhealthyThreshold?: number;
}
/**
 * Service observability configuration
 */
export interface ServiceObservabilityConfiguration {
  /**
   * Observability enabled
   */
  ObservabilityEnabled: boolean;
  /**
   * The Amazon Resource Name (ARN) of the App Runner ObservabilityConfiguration.
   */
  ObservabilityConfigurationArn?: string;
}
/**
 * Network configuration
 */
export interface NetworkConfiguration {
  EgressConfiguration?: EgressConfiguration;
  IngressConfiguration?: IngressConfiguration;
}
/**
 * Network egress configuration
 */
export interface EgressConfiguration {
  /**
   * Network egress type.
   */
  EgressType: "DEFAULT" | "VPC";
  /**
   * The Amazon Resource Name (ARN) of the App Runner VpcConnector.
   */
  VpcConnectorArn?: string;
}
/**
 * Network ingress configuration
 */
export interface IngressConfiguration {
  /**
   * It's set to true if the Apprunner service is publicly accessible. It's set to false otherwise.
   */
  IsPubliclyAccessible: boolean;
}
